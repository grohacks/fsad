apiVersion: v1
kind: Namespace
metadata:
  name: health-records
  labels:
    name: health-records
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-records-config
  namespace: health-records
data:
  spring.profiles.active: "production"
  server.port: "8080"
  logging.level.com.healthrecords: "INFO"
  logging.level.org.springframework.security: "WARN"
  spring.jpa.hibernate.ddl-auto: "validate"
  spring.jpa.show-sql: "false"
  spring.datasource.hikari.maximum-pool-size: "20"
  spring.datasource.hikari.minimum-idle: "5"
  spring.datasource.hikari.connection-timeout: "30000"
  spring.datasource.hikari.idle-timeout: "600000"
  spring.datasource.hikari.max-lifetime: "1800000"
---
apiVersion: v1
kind: Secret
metadata:
  name: health-records-secrets
  namespace: health-records
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  spring.datasource.url: amRiYzpteXNxbDovL215c3FsOjMzMDYvaGVhbHRocmVjb3Jkcw== # jdbc:mysql://mysql:3306/healthrecords
  spring.datasource.username: cm9vdA== # root
  spring.datasource.password: cGFzc3dvcmQ= # password
  jwt.secret: bXlTZWNyZXRLZXlGb3JKV1RUb2tlbnNJblByb2R1Y3Rpb24= # mySecretKeyForJWTTokensInProduction
  spring.mail.password: ZW1haWxwYXNzd29yZA== # emailpassword
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-records-backend
  namespace: health-records
  labels:
    app: health-records-backend
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: health-records-backend
  template:
    metadata:
      labels:
        app: health-records-backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
      - name: backend
        image: healthrecords/health-records-system-backend:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          valueFrom:
            configMapKeyRef:
              name: health-records-config
              key: spring.profiles.active
        - name: SERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: health-records-config
              key: server.port
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: health-records-secrets
              key: spring.datasource.url
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: health-records-secrets
              key: spring.datasource.username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: health-records-secrets
              key: spring.datasource.password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: health-records-secrets
              key: jwt.secret
        - name: SPRING_MAIL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: health-records-secrets
              key: spring.mail.password
        envFrom:
        - configMapRef:
            name: health-records-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: health-records-backend-service
  namespace: health-records
  labels:
    app: health-records-backend
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: health-records-backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-records-frontend
  namespace: health-records
  labels:
    app: health-records-frontend
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: health-records-frontend
  template:
    metadata:
      labels:
        app: health-records-frontend
        version: v1
    spec:
      containers:
      - name: frontend
        image: healthrecords/health-records-system-frontend:latest
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 101
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: var-cache-nginx
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: var-cache-nginx
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: health-records-frontend-service
  namespace: health-records
  labels:
    app: health-records-frontend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: health-records-frontend
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: health-records-ingress
  namespace: health-records
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - healthrecords.example.com
    - api.healthrecords.example.com
    secretName: health-records-tls
  rules:
  - host: healthrecords.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: health-records-frontend-service
            port:
              number: 80
  - host: api.healthrecords.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: health-records-backend-service
            port:
              number: 8080
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: health-records-service-account
  namespace: health-records
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: health-records-backend-pdb
  namespace: health-records
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: health-records-backend
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: health-records-frontend-pdb
  namespace: health-records
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: health-records-frontend
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: health-records-backend-hpa
  namespace: health-records
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: health-records-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: health-records-frontend-hpa
  namespace: health-records
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: health-records-frontend
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70