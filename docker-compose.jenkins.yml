version: '3.8'

services:
  # Jenkins Master
  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins-master
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      - JENKINS_OPTS="--httpPort=8080"
      - JAVA_OPTS=-Xmx2048m -Xms1024m
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./jenkins/init.groovy.d:/var/jenkins_home/init.groovy.d
      - ./jenkins/casc:/var/jenkins_home/casc
      - ./jenkins/plugins.txt:/usr/share/jenkins/ref/plugins.txt
    networks:
      - jenkins-network
    depends_on:
      - jenkins-agent
    environment:
      - CASC_JENKINS_CONFIG=/var/jenkins_home/casc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/login"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Jenkins Agent
  jenkins-agent:
    build:
      context: ./jenkins/agent
      dockerfile: Dockerfile
    container_name: jenkins-agent
    restart: unless-stopped
    environment:
      - JENKINS_URL=http://jenkins:8080
      - JENKINS_AGENT_NAME=docker-agent
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - jenkins_agent_workdir:/home/jenkins/agent
    networks:
      - jenkins-network
    depends_on:
      - docker-dind

  # Docker-in-Docker for Jenkins agents
  docker-dind:
    image: docker:dind
    container_name: jenkins-docker
    restart: unless-stopped
    privileged: true
    environment:
      - DOCKER_TLS_CERTDIR=/certs
    volumes:
      - jenkins_docker_certs:/certs/client
      - jenkins_docker_data:/var/lib/docker
    ports:
      - "2376:2376"
    networks:
      - jenkins-network
    command: --storage-driver=overlay2

  # SonarQube for code quality analysis
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube
      - SONAR_JDBC_USERNAME=sonarqube
      - SONAR_JDBC_PASSWORD=sonarpassword
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - jenkins-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL for SonarQube
  postgres:
    image: postgres:13
    container_name: jenkins-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=sonarqube
      - POSTGRES_PASSWORD=sonarpassword
      - POSTGRES_DB=sonarqube
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - jenkins-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonarqube"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nexus Repository Manager
  nexus:
    image: sonatype/nexus3:latest
    container_name: nexus
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - NEXUS_SECURITY_RANDOMPASSWORD=false
    volumes:
      - nexus_data:/nexus-data
    networks:
      - jenkins-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/service/rest/v1/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx as reverse proxy
  nginx:
    image: nginx:alpine
    container_name: jenkins-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - jenkins-network
    depends_on:
      - jenkins
      - sonarqube
      - nexus

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - jenkins-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - jenkins-network
    depends_on:
      - prometheus

  # Jenkins backup service
  jenkins-backup:
    image: alpine:latest
    container_name: jenkins-backup
    restart: "no"
    volumes:
      - jenkins_home:/jenkins-home:ro
      - ./backups:/backups
    command: |
      sh -c "
        apk add --no-cache tar gzip
        DATE=$$(date +%Y%m%d_%H%M%S)
        tar -czf /backups/jenkins_backup_$$DATE.tar.gz -C /jenkins-home .
        find /backups -name 'jenkins_backup_*.tar.gz' -mtime +7 -delete
        echo 'Backup completed: jenkins_backup_$$DATE.tar.gz'
      "
    networks:
      - jenkins-network

networks:
  jenkins-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  jenkins_home:
    driver: local
  jenkins_agent_workdir:
    driver: local
  jenkins_docker_certs:
    driver: local
  jenkins_docker_data:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_logs:
    driver: local
  postgres_data:
    driver: local
  nexus_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local